import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithRedirect,
  signInWithPopup,
  GoogleAuthProvider,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged
} from "firebase/auth";

import{
  getFirestore,
  doc,
  getDoc,
  setDoc
} from 'firebase/firestore'

// configure firebase
const firebaseConfig = {
  apiKey: "AIzaSyAQrVHLiX9regAW6b_YUh0WrD6P_wv-4FI", //not super secret so OK here
  authDomain: "crown-db-e4075.firebaseapp.com",
  projectId: "crown-db-e4075",
  storageBucket: "crown-db-e4075.appspot.com",
  messagingSenderId: "531988064584",
  appId: "1:531988064584:web:5fdbbfedf1e6381d5a2b7d",
};

// Initialize Firebase
const firebaseApp = initializeApp(firebaseConfig);

// initialize auth provider
const googleProvider = new GoogleAuthProvider(); // firebase supports other providers, like facebook, etc.
googleProvider.setCustomParameters({
  prompt: "select_account" //force user to select account
});

export const auth = getAuth();
export const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);
export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);

export const db = getFirestore(); // gets instance of db

export const createUserDocumentFromAuth = async (userAuth, additionalInformation={}) => {
  const userDocRef = doc(db, 'users', userAuth.uid)    // 'users' is a name we create, userAuth.uid is unique id generated by firebase
  console.log(userDocRef);

  const userSnapshot = await getDoc(userDocRef);
  console.log(userSnapshot);

  if(!userSnapshot.exists()) {
    const { displayName, email } = userAuth;
    const createdAt = new Date();
    try {
      await setDoc(userDocRef, {
        displayName,
        email,
        createdAt,
        ...additionalInformation
      })
    } catch (error) {
      console.log("Error creating user: " + error.message);
    }
    return userDocRef;
  }

}

export const createAuthUserWithEmailAndPassword = async (email, password) => {
  if(!email || !password) return;
  return await createUserWithEmailAndPassword(auth, email, password);
}

export const signInAuthUserWithEmailAndPassword = async (email, password) => {
  if(!email || !password) return;
  return await signInWithEmailAndPassword(auth, email, password);
}

export const signOutUser = async () => await signOut(auth);

export const onAuthStateChangedListener = (callback) => onAuthStateChanged(auth, callback);